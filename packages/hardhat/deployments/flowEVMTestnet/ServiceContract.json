{
  "address": "0xfF4f2C5ee5a4e2ae0F818cd89780D000314adf4c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_serviceNFTAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "acceptedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "completionImageHash",
          "type": "string"
        }
      ],
      "name": "CompletionImageSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rejectedAcceptor",
          "type": "address"
        }
      ],
      "name": "ServiceAcceptanceRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pendingAcceptor",
          "type": "address"
        }
      ],
      "name": "ServiceAcceptanceRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "acceptedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        }
      ],
      "name": "ServiceAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        }
      ],
      "name": "ServiceCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "acceptedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        }
      ],
      "name": "ServiceCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "startLocation",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "endLocation",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "flowAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "imageIpfsHash",
          "type": "string"
        }
      ],
      "name": "ServiceCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_ACTIVE_SERVICES",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "acceptedServices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "activeServicesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_serviceId",
          "type": "uint256"
        }
      ],
      "name": "approveServiceAcceptance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_serviceId",
          "type": "uint256"
        }
      ],
      "name": "cancelService",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_serviceId",
          "type": "uint256"
        }
      ],
      "name": "completeService",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_startLocation",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_endLocation",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_imageIpfsHash",
          "type": "string"
        }
      ],
      "name": "createService",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveServiceIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllServiceIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_serviceId",
          "type": "uint256"
        }
      ],
      "name": "getService",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "startLocation",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "endLocation",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "flowAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "requester",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pendingAcceptor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "acceptedBy",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "completed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nftTokenId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "imageIpfsHash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "completionImageHash",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "completionSubmitted",
              "type": "bool"
            }
          ],
          "internalType": "struct ServiceContract.Service",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accepter",
          "type": "address"
        }
      ],
      "name": "getServicesByAccepter",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_requester",
          "type": "address"
        }
      ],
      "name": "getServicesByRequester",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_serviceId",
          "type": "uint256"
        }
      ],
      "name": "rejectServiceAcceptance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_serviceId",
          "type": "uint256"
        }
      ],
      "name": "requestServiceAcceptance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requesterServices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "serviceCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "serviceNFT",
      "outputs": [
        {
          "internalType": "contract IServiceNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "services",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "startLocation",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "endLocation",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "flowAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pendingAcceptor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "acceptedBy",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "completed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "imageIpfsHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "completionImageHash",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "completionSubmitted",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_serviceId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_completionImageHash",
          "type": "string"
        }
      ],
      "name": "submitCompletionImage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf6d930e101f1e711078278d59681c54684dbe5fcd4142549ab4daa55496c1011",
  "receipt": {
    "to": null,
    "from": "0x96E7Ebadb27e04C2425a4f9BAFFf9F38295383b7",
    "contractAddress": "0xfF4f2C5ee5a4e2ae0F818cd89780D000314adf4c",
    "transactionIndex": 0,
    "gasUsed": "2178511",
    "logsBloom": "0x
    "blockHash": "0x9e6e1a04f279cfee3a1d75440432e7f34f5a9a81ef152712ba21205f2db2c83d",
    "transactionHash": "0xf6d930e101f1e711078278d59681c54684dbe5fcd4142549ab4daa55496c1011",
    "logs": [],
    "blockNumber": 76535615,
    "cumulativeGasUsed": "2178511",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x953693c87E78166c9Ea4AfC90acA8792F95Da8d4"
  ],
  "numDeployments": 6,
  "solcInputHash": "c2e030876fb2c1a07864cd2a29d0543d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_serviceNFTAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"acceptedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"completionImageHash\",\"type\":\"string\"}],\"name\":\"CompletionImageSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rejectedAcceptor\",\"type\":\"address\"}],\"name\":\"ServiceAcceptanceRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingAcceptor\",\"type\":\"address\"}],\"name\":\"ServiceAcceptanceRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"acceptedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"}],\"name\":\"ServiceAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"ServiceCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"acceptedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"}],\"name\":\"ServiceCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"startLocation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"endLocation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"flowAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"imageIpfsHash\",\"type\":\"string\"}],\"name\":\"ServiceCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_ACTIVE_SERVICES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"acceptedServices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activeServicesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_serviceId\",\"type\":\"uint256\"}],\"name\":\"approveServiceAcceptance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_serviceId\",\"type\":\"uint256\"}],\"name\":\"cancelService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_serviceId\",\"type\":\"uint256\"}],\"name\":\"completeService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_startLocation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_endLocation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_imageIpfsHash\",\"type\":\"string\"}],\"name\":\"createService\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveServiceIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllServiceIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_serviceId\",\"type\":\"uint256\"}],\"name\":\"getService\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"startLocation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"endLocation\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"flowAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pendingAcceptor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"acceptedBy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"imageIpfsHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"completionImageHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"completionSubmitted\",\"type\":\"bool\"}],\"internalType\":\"struct ServiceContract.Service\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accepter\",\"type\":\"address\"}],\"name\":\"getServicesByAccepter\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_requester\",\"type\":\"address\"}],\"name\":\"getServicesByRequester\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_serviceId\",\"type\":\"uint256\"}],\"name\":\"rejectServiceAcceptance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_serviceId\",\"type\":\"uint256\"}],\"name\":\"requestServiceAcceptance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requesterServices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceNFT\",\"outputs\":[{\"internalType\":\"contract IServiceNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"services\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"startLocation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"endLocation\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"flowAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pendingAcceptor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"acceptedBy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"imageIpfsHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"completionImageHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"completionSubmitted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_serviceId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_completionImageHash\",\"type\":\"string\"}],\"name\":\"submitCompletionImage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"completeService(uint256)\":{\"notice\":\"MODIFIED: Complete service (now called by requester after verifying completion image)\"},\"submitCompletionImage(uint256,string)\":{\"notice\":\"NEW: Submit completion image (called by service provider)\"}},\"notice\":\"A smart contract that manages service requests with NFT escrow Implements two-signature approval system with image proof of completion\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ServiceContract.sol\":\"ServiceContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/ServiceContract.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ninterface IServiceNFT {\\n    function mintServiceNFT(uint256 _serviceId, address _requester, address _acceptor) external payable returns (uint256);\\n    function completeServiceAndBurn(uint256 _tokenId) external;\\n    function getTokenIdForService(uint256 _serviceId) external view returns (uint256);\\n}\\n\\n/**\\n * A smart contract that manages service requests with NFT escrow\\n * Implements two-signature approval system with image proof of completion\\n */\\ncontract ServiceContract {\\n    struct Service {\\n        uint256 id;\\n        string title;\\n        string startLocation;\\n        string endLocation;\\n        uint256 flowAmount;\\n        address requester;\\n        address pendingAcceptor;\\n        address acceptedBy;\\n        bool completed;\\n        uint256 createdAt;\\n        uint256 nftTokenId;\\n        string imageIpfsHash;           // Service request image\\n        string completionImageHash;     // Completion proof image\\n        bool completionSubmitted;       // Has acceptor submitted completion image?\\n    }\\n\\n    uint256 public serviceCount;\\n    mapping(uint256 => Service) public services;\\n    mapping(address => uint256[]) public requesterServices;\\n    mapping(address => uint256[]) public acceptedServices;\\n    mapping(address => uint256) public activeServicesCount;\\n    uint256 public constant MAX_ACTIVE_SERVICES = 10;\\n    \\n    IServiceNFT public serviceNFT;\\n\\n    event ServiceCreated(\\n        uint256 indexed id,\\n        address indexed requester,\\n        string title,\\n        string startLocation,\\n        string endLocation,\\n        uint256 flowAmount,\\n        string imageIpfsHash\\n    );\\n    \\n    event ServiceAcceptanceRequested(\\n        uint256 indexed id,\\n        address indexed requester,\\n        address indexed pendingAcceptor\\n    );\\n    \\n    event ServiceAccepted(\\n        uint256 indexed id,\\n        address indexed requester,\\n        address indexed acceptedBy,\\n        uint256 nftTokenId\\n    );\\n    \\n    event ServiceAcceptanceRejected(\\n        uint256 indexed id,\\n        address indexed requester,\\n        address indexed rejectedAcceptor\\n    );\\n    \\n    event CompletionImageSubmitted(\\n        uint256 indexed id,\\n        address indexed acceptedBy,\\n        string completionImageHash\\n    );\\n    \\n    event ServiceCompleted(\\n        uint256 indexed id,\\n        address indexed requester,\\n        address indexed acceptedBy,\\n        uint256 nftTokenId\\n    );\\n    \\n    event ServiceCancelled(\\n        uint256 indexed id,\\n        address indexed requester\\n    );\\n\\n    constructor(address _serviceNFTAddress) {\\n        serviceNFT = IServiceNFT(_serviceNFTAddress);\\n    }\\n\\n    function createService(\\n        string memory _title,\\n        string memory _startLocation,\\n        string memory _endLocation,\\n        string memory _imageIpfsHash\\n    ) public payable {\\n        require(msg.value > 0, \\\"Flow amount must be greater than 0\\\");\\n        require(bytes(_title).length > 0, \\\"Title cannot be empty\\\");\\n        require(bytes(_startLocation).length > 0, \\\"Start location cannot be empty\\\");\\n        require(bytes(_endLocation).length > 0, \\\"End location cannot be empty\\\");\\n        require(bytes(_imageIpfsHash).length > 0, \\\"Image hash cannot be empty\\\");\\n        require(activeServicesCount[msg.sender] < MAX_ACTIVE_SERVICES, \\\"Too many active services\\\");\\n\\n        serviceCount++;\\n        services[serviceCount] = Service({\\n            id: serviceCount,\\n            title: _title,\\n            startLocation: _startLocation,\\n            endLocation: _endLocation,\\n            flowAmount: msg.value,\\n            requester: msg.sender,\\n            pendingAcceptor: address(0),\\n            acceptedBy: address(0),\\n            completed: false,\\n            createdAt: block.timestamp,\\n            nftTokenId: 0,\\n            imageIpfsHash: _imageIpfsHash,\\n            completionImageHash: \\\"\\\",\\n            completionSubmitted: false\\n        });\\n\\n        requesterServices[msg.sender].push(serviceCount);\\n        activeServicesCount[msg.sender]++;\\n\\n        console.log(\\\"Service created with ID:\\\", serviceCount);\\n        console.log(\\\"Image IPFS Hash:\\\", _imageIpfsHash);\\n\\n        emit ServiceCreated(\\n            serviceCount, \\n            msg.sender, \\n            _title, \\n            _startLocation, \\n            _endLocation, \\n            msg.value,\\n            _imageIpfsHash\\n        );\\n    }\\n\\n    function requestServiceAcceptance(uint256 _serviceId) public {\\n        require(_serviceId > 0 && _serviceId <= serviceCount, \\\"Invalid service ID\\\");\\n        Service storage service = services[_serviceId];\\n        require(service.acceptedBy == address(0), \\\"Service already accepted\\\");\\n        require(service.pendingAcceptor == address(0), \\\"Acceptance already pending\\\");\\n        require(service.completed == false, \\\"Service already completed\\\");\\n        require(service.requester != msg.sender, \\\"Cannot accept your own service\\\");\\n\\n        service.pendingAcceptor = msg.sender;\\n\\n        console.log(\\\"Acceptance requested for service:\\\", _serviceId);\\n        console.log(\\\"Pending acceptor:\\\", msg.sender);\\n\\n        emit ServiceAcceptanceRequested(_serviceId, service.requester, msg.sender);\\n    }\\n\\n    function approveServiceAcceptance(uint256 _serviceId) public {\\n        require(_serviceId > 0 && _serviceId <= serviceCount, \\\"Invalid service ID\\\");\\n        Service storage service = services[_serviceId];\\n        require(service.requester == msg.sender, \\\"Only requester can approve\\\");\\n        require(service.pendingAcceptor != address(0), \\\"No pending acceptance\\\");\\n        require(service.acceptedBy == address(0), \\\"Service already accepted\\\");\\n        require(service.completed == false, \\\"Service already completed\\\");\\n\\n        address acceptor = service.pendingAcceptor;\\n        service.acceptedBy = acceptor;\\n        service.pendingAcceptor = address(0);\\n        \\n        acceptedServices[acceptor].push(_serviceId);\\n\\n        uint256 tokenId = serviceNFT.mintServiceNFT{value: service.flowAmount}(\\n            _serviceId,\\n            service.requester,\\n            acceptor\\n        );\\n        \\n        service.nftTokenId = tokenId;\\n\\n        console.log(\\\"Service acceptance approved:\\\", _serviceId);\\n        console.log(\\\"NFT minted:\\\", tokenId);\\n\\n        emit ServiceAccepted(_serviceId, service.requester, acceptor, tokenId);\\n    }\\n\\n    function rejectServiceAcceptance(uint256 _serviceId) public {\\n        require(_serviceId > 0 && _serviceId <= serviceCount, \\\"Invalid service ID\\\");\\n        Service storage service = services[_serviceId];\\n        require(service.requester == msg.sender, \\\"Only requester can reject\\\");\\n        require(service.pendingAcceptor != address(0), \\\"No pending acceptance\\\");\\n\\n        address rejected = service.pendingAcceptor;\\n        service.pendingAcceptor = address(0);\\n\\n        console.log(\\\"Service acceptance rejected:\\\", _serviceId);\\n        console.log(\\\"Rejected acceptor:\\\", rejected);\\n\\n        emit ServiceAcceptanceRejected(_serviceId, msg.sender, rejected);\\n    }\\n\\n    /**\\n     * NEW: Submit completion image (called by service provider)\\n     */\\n    function submitCompletionImage(uint256 _serviceId, string memory _completionImageHash) public {\\n        require(_serviceId > 0 && _serviceId <= serviceCount, \\\"Invalid service ID\\\");\\n        Service storage service = services[_serviceId];\\n        require(service.acceptedBy == msg.sender, \\\"Only acceptor can submit completion\\\");\\n        require(service.completed == false, \\\"Service already completed\\\");\\n        require(!service.completionSubmitted, \\\"Completion already submitted\\\");\\n        require(bytes(_completionImageHash).length > 0, \\\"Completion image hash cannot be empty\\\");\\n\\n        service.completionImageHash = _completionImageHash;\\n        service.completionSubmitted = true;\\n\\n        console.log(\\\"Completion image submitted for service:\\\", _serviceId);\\n        console.log(\\\"Completion Image Hash:\\\", _completionImageHash);\\n\\n        emit CompletionImageSubmitted(_serviceId, msg.sender, _completionImageHash);\\n    }\\n\\n    /**\\n     * MODIFIED: Complete service (now called by requester after verifying completion image)\\n     */\\n    function completeService(uint256 _serviceId) public {\\n        require(_serviceId > 0 && _serviceId <= serviceCount, \\\"Invalid service ID\\\");\\n        Service storage service = services[_serviceId];\\n        require(service.requester == msg.sender, \\\"Only requester can complete\\\");\\n        require(service.acceptedBy != address(0), \\\"Service not accepted yet\\\");\\n        require(service.completed == false, \\\"Service already completed\\\");\\n        require(service.nftTokenId > 0, \\\"No NFT associated\\\");\\n        require(service.completionSubmitted, \\\"Completion image not submitted yet\\\");\\n\\n        service.completed = true;\\n        activeServicesCount[service.requester]--;\\n\\n        serviceNFT.completeServiceAndBurn(service.nftTokenId);\\n\\n        console.log(\\\"Service completed:\\\", _serviceId);\\n        console.log(\\\"NFT burned:\\\", service.nftTokenId);\\n\\n        emit ServiceCompleted(_serviceId, service.requester, service.acceptedBy, service.nftTokenId);\\n    }\\n    \\n    function cancelService(uint256 _serviceId) public {\\n        require(_serviceId > 0 && _serviceId <= serviceCount, \\\"Invalid service ID\\\");\\n        Service storage service = services[_serviceId];\\n        require(service.requester == msg.sender, \\\"Only requester can cancel\\\");\\n        require(service.acceptedBy == address(0), \\\"Cannot cancel accepted service\\\");\\n        require(service.completed == false, \\\"Service already completed\\\");\\n\\n        service.completed = true;\\n        activeServicesCount[msg.sender]--;\\n\\n        (bool success, ) = msg.sender.call{value: service.flowAmount}(\\\"\\\");\\n        require(success, \\\"Refund failed\\\");\\n\\n        emit ServiceCancelled(_serviceId, msg.sender);\\n    }\\n\\n    function getAllServiceIds() public view returns (uint256[] memory) {\\n        uint256[] memory ids = new uint256[](serviceCount);\\n        for (uint256 i = 1; i <= serviceCount; i++) {\\n            ids[i - 1] = i;\\n        }\\n        return ids;\\n    }\\n    \\n    function getActiveServiceIds() public view returns (uint256[] memory) {\\n        uint256 activeCount = 0;\\n        for (uint256 i = 1; i <= serviceCount; i++) {\\n            if (!services[i].completed) {\\n                activeCount++;\\n            }\\n        }\\n        \\n        uint256[] memory activeIds = new uint256[](activeCount);\\n        uint256 currentIndex = 0;\\n        for (uint256 i = 1; i <= serviceCount; i++) {\\n            if (!services[i].completed) {\\n                activeIds[currentIndex] = i;\\n                currentIndex++;\\n            }\\n        }\\n        \\n        return activeIds;\\n    }\\n\\n    function getService(uint256 _serviceId) public view returns (Service memory) {\\n        require(_serviceId > 0 && _serviceId <= serviceCount, \\\"Invalid service ID\\\");\\n        return services[_serviceId];\\n    }\\n\\n    function getServicesByRequester(address _requester) public view returns (uint256[] memory) {\\n        return requesterServices[_requester];\\n    }\\n\\n    function getServicesByAccepter(address _accepter) public view returns (uint256[] memory) {\\n        return acceptedServices[_accepter];\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xf05b32d66881c5ff2f5db13918f0b1488efb70513bb60782e57909fef7f3b690\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60803461007457601f61268a38819003918201601f19168301916001600160401b038311848410176100795780849260209460405283398101031261007457516001600160a01b0381169081900361007457600580546001600160a01b0319169190911790556040516125fa90816100908239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001d575b50361561001b57600080fd5b005b600090813560e01c908163062375261461204e5750806306ba80e514611cc4578063148031a114611b045780631ad2ee0d14611aae5780631d5a25e414611a925780632f3ccebd146117cd57806342a882c514611705578063870e1eaf146115a757806397ac06681461156e578063a2f69a07146114fb578063b709dc2714611334578063c22c4f43146111f8578063ceebd1b214611179578063e542d10614611122578063e855b6cf146110f9578063eb376ff514610eca578063ef0e239b14610c4b578063f6da16cb1461016d5763f7262afc0361000f573461016a578060031936011261016a57805461011281612481565b9060015b81811115610130576040518061012c8582612186565b0390f35b600019810181811161015657908061014b61015193866124b3565b526122e1565b610116565b634e487b7160e01b85526011600452602485fd5b80fd5b50608036600319011261016a576004356001600160401b038111610c47576101999036906004016120f6565b6024356001600160401b038111610c43576101b89036906004016120f6565b60449182356001600160401b038111610c3f576101d99036906004016120f6565b606480356001600160401b038111610c3b576101f99036906004016120f6565b943415610bee57835115610bb557845115610b7457825115610b3357855115610af2573387526004602052600a60408820541015610ab157505061023d85546122e1565b8086556040519061024d82612068565b8082528360208301528460408301528260608301523460808301523360a08301528660c08301528660e0830152866101008301524261012083015286610140830152856101608301526040518060208101106001600160401b03602083011117610a9b5760208101604052878152610180830152866101a083015286526001602052604086208151815560208201518051906001600160401b03821161075b5781906102fc60018501546121c1565b601f8111610a4a575b50602090601f83116001146109db578a926109d0575b50508160011b916000199060031b1c19161760018201555b60408201518051906001600160401b03821161075b57819061035860028501546121c1565b601f811161097f575b50602090601f8311600114610910578a92610905575b50508160011b916000199060031b1c19161760028201555b60608201518051906001600160401b03821161075b5781906103b460038501546121c1565b601f81116108b4575b50602090601f8311600114610845578a9261083a575b50508160011b916000199060031b1c19161760038201555b6080820151600482015560a0808301516005830180546001600160a01b03199081166001600160a01b039384161790915560c085015160068501805490921690831617905560e08401516007840180546101008701516001600160a81b0319909116929093169190911791151590921b60ff60a01b16179055610120820151600882015561014082015160098201556101608201518051906001600160401b03821161075b5781906104a0600a8501546121c1565b601f81116107e9575b50602090601f831160011461077a578a9261076f575b50508160011b916000199060031b1c191617600a8201555b6101808201518051906001600160401b03821161075b576104fb600b8401546121c1565b601f8111610716575b5060209089601f841160011461067857600c6106679585610652966106369a967f0232fc13fd751a3b690156acdf75eaa406dbf486d58c0570fa809eb882ae1a6a9c9a966101a0969261066d575b50508160011b916000199060031b1c191617600b8201555b01910151151560ff80198354169116179055338952600260205261059360408a208a5490612306565b3389526004602052604089206105a981546122e1565b90556106448954976105f0896040516105c18161209f565b601881527f53657276696365206372656174656420776974682049443a000000000000000060208201526124c7565b6106228a6040516106008161209f565b601081526f24b6b0b3b29024a82329902430b9b41d60811b602082015261251f565b60405196879660a0885260a08801906122a1565b9086820360208801526122a1565b9084820360408601526122a1565b346060840152828103608084015233966122a1565b0390a380f35b015190503880610552565b50600b84018a5260208a209190601f1984168b5b8181106106fe5750610667956001866106369a967f0232fc13fd751a3b690156acdf75eaa406dbf486d58c0570fa809eb882ae1a6a9c9a966101a0966106529a600c97106106e5575b505050811b01600b82015561056a565b015160001960f88460031b161c191690553880806106d5565b9293602060018192878601518155019501930161068c565b600b84018a5260208a20601f840160051c810160208510610754575b601f830160051c82018110610748575050610504565b60008155600101610732565b5080610732565b634e487b7160e01b89526041600452602489fd5b0151905038806104bf565b9250600a84018a5260208a20908a935b601f19841685106107ce576001945083601f198116106107b5575b505050811b01600a8201556104d7565b015160001960f88460031b161c191690553880806107a5565b8181015183556020948501946001909301929091019061078a565b909150600a84018a5260208a20601f840160051c810160208510610833575b90849392915b601f830160051c820181106108245750506104a9565b6000815585945060010161080e565b5080610808565b0151905038806103d3565b9250600384018a5260208a20908a935b601f1984168510610899576001945083601f19811610610880575b505050811b0160038201556103eb565b015160001960f88460031b161c19169055388080610870565b81810151835560209485019460019093019290910190610855565b909150600384018a5260208a20601f840160051c8101602085106108fe575b90849392915b601f830160051c820181106108ef5750506103bd565b600081558594506001016108d9565b50806108d3565b015190503880610377565b9250600284018a5260208a20908a935b601f1984168510610964576001945083601f1981161061094b575b505050811b01600282015561038f565b015160001960f88460031b161c1916905538808061093b565b81810151835560209485019460019093019290910190610920565b909150600284018a5260208a20601f840160051c8101602085106109c9575b90849392915b601f830160051c820181106109ba575050610361565b600081558594506001016109a4565b508061099e565b01519050388061031b565b9250600184018a5260208a20908a935b601f1984168510610a2f576001945083601f19811610610a16575b505050811b016001820155610333565b015160001960f88460031b161c19169055388080610a06565b818101518355602094850194600190930192909101906109eb565b909150600184018a5260208a20601f840160051c810160208510610a94575b90849392915b601f830160051c82018110610a85575050610305565b60008155859450600101610a6f565b5080610a69565b634e487b7160e01b600052604160045260246000fd5b7f546f6f206d616e792061637469766520736572766963657300000000000000006040519162461bcd60e51b83526020600484015260186024840152820152fd5b7f496d61676520686173682063616e6e6f7420626520656d7074790000000000006040519162461bcd60e51b835260206004840152601a6024840152820152fd5b7f456e64206c6f636174696f6e2063616e6e6f7420626520656d707479000000006040519162461bcd60e51b835260206004840152601c6024840152820152fd5b7f5374617274206c6f636174696f6e2063616e6e6f7420626520656d70747900006040519162461bcd60e51b835260206004840152601e6024840152820152fd5b745469746c652063616e6e6f7420626520656d70747960581b6040519162461bcd60e51b83526020600484015260156024840152820152fd5b61020360f41b6084927f466c6f7720616d6f756e74206d7573742062652067726561746572207468616e6040519362461bcd60e51b85526020600486015260226024860152840152820152fd5b8680fd5b8480fd5b8280fd5b5080fd5b503461016a57602036600319011261016a57806040916101a08351610c6f81612068565b828152606060208201526060858201526060808201528260808201528260a08201528260c08201528260e082015282610100820152826101208201528261014082015260606101608201526060610180820152015260043580151580610ebf575b610cd990612340565b815260016020522060ff600c60405192610cf284612068565b80548452610d02600182016121fb565b6020850152610d13600282016121fb565b6040850152610d24600382016121fb565b60608501526004810154608085015260058101546001600160a01b0390811660a0808701919091526006830154821660c0870152600783015491821660e08701521c8316151561010085015260088101546101208501526009810154610140850152610d92600a82016121fb565b610160850152610da4600b82016121fb565b61018085015201541615156101a0820152604051809160208252805160208301526101a0610eb0610e9a610e1b610e05610def60208701516101c060408a01526101e08901906122a1565b6040870151888203601f190160608a01526122a1565b6060860151878203601f190160808901526122a1565b608085015160a087015260018060a01b0360a08601511660c087015260018060a01b0360c08601511660e087015260018060a01b0360e0860151166101008701526101008501511515610120870152610120850151610140870152610140850151610160870152610160850151601f19878303016101808801526122a1565b610180840151858203601f1901848701526122a1565b91015115156101c08301520390f35b508154811115610cd0565b503461016a57602080600319360112610c4757600435801515806110ee575b610ef290612340565b80835260018252604083206005810180546001600160a01b03949293919290851633036110aa57600684019485549581871696610f30881515612419565b6007870190815491610f4485841615612381565b610f5460ff8460a01c16156123cd565b896bffffffffffffffffffffffff60a01b80941617905516905585875260038252610f828360408920612306565b80600554169382600487015495606484845416604051988993849263f6c9d18160e01b84528a600485015260248401528c60448401525af194851561109f578895611069575b508460097f920b68889c6cbb939cd36d69a0e12939a0bba7f2528e4ee3816950fef1fee78a9596970155611030856040516110028161209f565b601c81527f5365727669636520616363657074616e636520617070726f7665643a00000000868201526124c7565b61105c866040516110408161209f565b600b81526a27232a1036b4b73a32b21d60a91b868201526124c7565b541693604051908152a480f35b9394508284813d8311611098575b61108181836120ba565b8101031261109457925193926009610fc8565b8780fd5b503d611077565b6040513d8a823e3d90fd5b6064906040519062461bcd60e51b82526004820152601a60248201527f4f6e6c79207265717565737465722063616e20617070726f76650000000000006044820152fd5b508254811115610ee9565b503461016a578060031936011261016a576005546040516001600160a01b039091168152602090f35b503461016a57604036600319011261016a5761113c612142565b6001600160a01b031681526003602052604081208054602435929083101561016a57602061116a8484612158565b90549060031b1c604051908152f35b503461016a57602080600319360112610c47576001600160a01b0361119c612142565b1682526002815260408220916040518092808554928381520194835280832092905b8282106111e15761012c856111d5818903826120ba565b60405191829182612186565b8354865294850194600193840193909101906111be565b503461016a57602036600319011261016a576004358152600160205260409020805460018201611227906121fb565b91611234600282016121fb565b90611241600382016121fb565b6004820154600583015460068401546007850154600886015460098701549390926001600160a01b039190821690821661127d600a8a016121fb565b9761128a600b8b016121fb565b99600c015460ff169a6040519d8e9d8e528d6101c090816020820152016112b0916122a1565b8d810360408f01526112c1916122a1565b8c810360608e01526112d2916122a1565b9660808c015260a08b015260c08a0152811660e089015260a01c60ff161515610100880152610120870152610140860152848103610160860152611315916122a1565b838103610180850152611327916122a1565b9015156101a08301520390f35b503461016a57602080600319360112610c475760043590811515806114f0575b61135d90612340565b8183526001815260408320600781015491906001600160a01b0361138381851615612381565b60068201918254948286166114ab57906113a560ff60059360a01c16156123cd565b01541692338414611466576001600160a01b0319163317905560405161143d919061140d9085906113d581612084565b602181527f416363657074616e63652072657175657374656420666f72207365727669636584820152601d60f91b60408201526124c7565b702832b73234b7339030b1b1b2b83a37b91d60791b6040519161142f8361209f565b601183528201523390612574565b33917fc071e3d7bc5aad33931c27ff45d85450f24b6cd998f0de0e7f7d7b7bc4996e5e8480a480f35b60405162461bcd60e51b815260048101849052601e60248201527f43616e6e6f742061636365707420796f7572206f776e207365727669636500006044820152606490fd5b60405162461bcd60e51b815260048101869052601a60248201527f416363657074616e636520616c72656164792070656e64696e670000000000006044820152606490fd5b508254821115611354565b503461016a57602080600319360112610c47576001600160a01b0361151e612142565b1682526003815260408220916040518092808554928381520194835280832092905b8282106115575761012c856111d5818903826120ba565b835486529485019460019384019390910190611540565b503461016a57602036600319011261016a576020906040906001600160a01b03611596612142565b168152600483522054604051908152f35b503461016a57602036600319011261016a57600435801515806116fa575b6115ce90612340565b80825260016020526040822060058101546001600160a01b03929190831633036116b557600601805492831692611606841515612419565b6bffffffffffffffffffffffff60a01b169055611658816040516116298161209f565b601c81527f5365727669636520616363657074616e63652072656a65637465643a0000000060208201526124c7565b61168c826040516116688161209f565b60128152712932b532b1ba32b21030b1b1b2b83a37b91d60711b6020820152612574565b33907f8737e827aa89fe14679f24685f69b7d73d97215ed79c9fbc5f12efa80f61f9188480a480f35b60405162461bcd60e51b815260206004820152601960248201527f4f6e6c79207265717565737465722063616e2072656a656374000000000000006044820152606490fd5b5081548111156115c5565b503461016a578060031936011261016a5780548160015b8281111561178e575061172e90612481565b918060015b83811115611749576040518061012c8782612186565b808252600160205260ff600760408420015460a01c1615611773575b61176e906122e1565b611733565b91611786818461014b61176e94896124b3565b929050611765565b808452600160205260ff600760408620015460a01c16156117b8575b6117b3906122e1565b61171c565b906117c56117b3916122e1565b9190506117aa565b503461016a57602080600319360112610c475760043580151580611a87575b6117f590612340565b808352600182526040832090600582019260018060a01b038085541693338503611a425760078101948554838116156119fd5761183860ff8260a01c16156123cd565b60098301928354156119c457600c015460ff16156119745760ff60a01b1916600160a01b1786558752600483526040872080546118749061245d565b9055868260055416825490803b15610c4357602483926040519485938492630b6e5b3360e01b845260048401525af1801561109f57611945575b5090807f0d4a7936f89e13722727311f269700437c769fba2cf442558c53a0f53a322dfa9392611907866040516118e48161209f565b601281527129b2b93b34b1b29031b7b6b83632ba32b21d60711b878201526124c7565b5496611935886040516119198161209f565b600b81526a27232a10313ab93732b21d60a91b878201526124c7565b541694541694604051908152a480f35b6001600160401b0381989298116119605760405295816118ae565b634e487b7160e01b82526041600452602482fd5b60405162461bcd60e51b815260048101869052602260248201527f436f6d706c6574696f6e20696d616765206e6f74207375626d69747465642079604482015261195d60f21b6064820152608490fd5b60405162461bcd60e51b8152600481018790526011602482015270139bc813919508185cdcdbd8da585d1959607a1b6044820152606490fd5b60405162461bcd60e51b815260048101869052601860248201527f53657276696365206e6f742061636365707465642079657400000000000000006044820152606490fd5b60405162461bcd60e51b815260048101849052601b60248201527f4f6e6c79207265717565737465722063616e20636f6d706c65746500000000006044820152606490fd5b5082548111156117ec565b503461016a578060031936011261016a576020604051600a8152f35b503461016a57604036600319011261016a57611ac8612142565b6001600160a01b031681526002602052604081208054602435929083101561016a576020611af68484612158565b90546040519160031b1c8152f35b503461016a57602080600319360112610c47576004359081151580611cb9575b611b2d90612340565b818352600181526040832060058101546001600160a01b039081163303611c745760078201908154908116611c2f578560048194829484611b7560ff869760a01c16156123cd565b60ff60a01b1916600160a01b179055338352818752604083208054611b999061245d565b90550154335af13d15611c2a573d611bb0816120db565b90611bbe60405192836120ba565b815284833d92013e5b15611bf6575033907f4de9c9d8194dcb45ece90ef821b3695534fee9d6c7b5bd9b260de4ded1fd9e8f8380a380f35b6064906040519062461bcd60e51b82526004820152600d60248201526c1499599d5b990819985a5b1959609a1b6044820152fd5b611bc7565b60405162461bcd60e51b815260048101859052601e60248201527f43616e6e6f742063616e63656c206163636570746564207365727669636500006044820152606490fd5b60405162461bcd60e51b815260048101849052601960248201527f4f6e6c79207265717565737465722063616e2063616e63656c000000000000006044820152606490fd5b508254821115611b24565b503461016a57604036600319011261016a576001600160401b0360043560243582811161204a57611cf99036906004016120f6565b8115158061203f575b611d0b90612340565b818452600160208181526040862060078101549195909291336001600160a01b03821603611fee5760ff611d439160a01c16156123cd565b600c83019260ff845416611fa957845115611f5657600b01908451908111611f4257611d6f82546121c1565b601f8111611efc575b5086601f8211600114611e765791817f6babfd0069fb9ab85f10e0e5dac7bc989ffe1074e08acc9e603f73a15165d0d496949261066796948b91611e6b575b50600019600383901b1c191690831b1790555b60ff19825416179055611e2184604051611de381612084565b602781527f436f6d706c6574696f6e20696d616765207375626d697474656420666f722073888201526632b93b34b1b29d60c91b60408201526124c7565b611e5881604051611e318161209f565b601681527521b7b6b83632ba34b7b71024b6b0b3b2902430b9b41d60511b8882015261251f565b60405191829186835233968301906122a1565b905085015138611db7565b82895287892090601f1983168a5b8a828210611ee857505092610667969492869492827f6babfd0069fb9ab85f10e0e5dac7bc989ffe1074e08acc9e603f73a15165d0d49a989410611ecf575b5050811b019055611dca565b87015160001960f88460031b161c191690553880611ec3565b898401518555938701939283019201611e84565b828952878920601f830160051c810191898410611f38575b601f0160051c019084905b828110611f2d575050611d78565b8a8155018490611f1f565b9091508190611f14565b634e487b7160e01b88526041600452602488fd5b60405162461bcd60e51b815260048101889052602560248201527f436f6d706c6574696f6e20696d61676520686173682063616e6e6f7420626520604482015264656d70747960d81b6064820152608490fd5b60405162461bcd60e51b815260048101889052601c60248201527f436f6d706c6574696f6e20616c7265616479207375626d6974746564000000006044820152606490fd5b60405162461bcd60e51b815260048101889052602360248201527f4f6e6c79206163636570746f722063616e207375626d697420636f6d706c657460448201526234b7b760e91b6064820152608490fd5b508354821115611d02565b8380fd5b905034610c475781600319360112610c4757602091548152f35b6101c081019081106001600160401b03821117610a9b57604052565b606081019081106001600160401b03821117610a9b57604052565b604081019081106001600160401b03821117610a9b57604052565b90601f801991011681019081106001600160401b03821117610a9b57604052565b6001600160401b038111610a9b57601f01601f191660200190565b81601f8201121561213d5780359061210d826120db565b9261211b60405194856120ba565b8284526020838301011161213d57816000926020809301838601378301015290565b600080fd5b600435906001600160a01b038216820361213d57565b80548210156121705760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b6020908160408183019282815285518094520193019160005b8281106121ad575050505090565b83518552938101939281019260010161219f565b90600182811c921680156121f1575b60208310146121db57565b634e487b7160e01b600052602260045260246000fd5b91607f16916121d0565b906040519182600082549261220f846121c1565b90818452600194858116908160001461227e575060011461223b575b5050612239925003836120ba565b565b9093915060005260209081600020936000915b8183106122665750506122399350820101388061222b565b8554888401850152948501948794509183019161224e565b91505061223994506020925060ff191682840152151560051b820101388061222b565b919082519283825260005b8481106122cd575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016122ac565b60001981146122f05760010190565b634e487b7160e01b600052601160045260246000fd5b805468010000000000000000811015610a9b5761232891600182018155612158565b819291549060031b91821b91600019901b1916179055565b1561234757565b60405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a59081cd95c9d9a58d948125160721b6044820152606490fd5b1561238857565b60405162461bcd60e51b815260206004820152601860248201527f5365727669636520616c726561647920616363657074656400000000000000006044820152606490fd5b156123d457565b60405162461bcd60e51b815260206004820152601960248201527f5365727669636520616c726561647920636f6d706c65746564000000000000006044820152606490fd5b1561242057565b60405162461bcd60e51b81526020600482015260156024820152744e6f2070656e64696e6720616363657074616e636560581b6044820152606490fd5b80156122f0576000190190565b6001600160401b038111610a9b5760051b60200190565b9061248b8261246a565b61249860405191826120ba565b82815280926124a9601f199161246a565b0190602036910137565b80518210156121705760209160051b010190565b60009190829161250c60405180926124f86020830195632d839cb360e21b87526040602485015260648401906122a1565b90604483015203601f1981018352826120ba565b51906a636f6e736f6c652e6c6f675afa50565b6000919061256661250c84936040519283916125546020840196634b5c427760e01b88526040602486015260648501906122a1565b838103602319016044850152906122a1565b03601f1981018352826120ba565b60009190829161250c60405180926125a5602083019563319af33360e01b87526040602485015260648401906122a1565b6001600160a01b0391909116604483015203601f1981018352826120ba56fea26469706673582212201bfdd14c6d62d44175c50f013478462bb719b458533085c9e0e6819e5f36fd4d64736f6c63430008140033",
  "deployedBytecode": "0x608080604052600436101561001d575b50361561001b57600080fd5b005b600090813560e01c908163062375261461204e5750806306ba80e514611cc4578063148031a114611b045780631ad2ee0d14611aae5780631d5a25e414611a925780632f3ccebd146117cd57806342a882c514611705578063870e1eaf146115a757806397ac06681461156e578063a2f69a07146114fb578063b709dc2714611334578063c22c4f43146111f8578063ceebd1b214611179578063e542d10614611122578063e855b6cf146110f9578063eb376ff514610eca578063ef0e239b14610c4b578063f6da16cb1461016d5763f7262afc0361000f573461016a578060031936011261016a57805461011281612481565b9060015b81811115610130576040518061012c8582612186565b0390f35b600019810181811161015657908061014b61015193866124b3565b526122e1565b610116565b634e487b7160e01b85526011600452602485fd5b80fd5b50608036600319011261016a576004356001600160401b038111610c47576101999036906004016120f6565b6024356001600160401b038111610c43576101b89036906004016120f6565b60449182356001600160401b038111610c3f576101d99036906004016120f6565b606480356001600160401b038111610c3b576101f99036906004016120f6565b943415610bee57835115610bb557845115610b7457825115610b3357855115610af2573387526004602052600a60408820541015610ab157505061023d85546122e1565b8086556040519061024d82612068565b8082528360208301528460408301528260608301523460808301523360a08301528660c08301528660e0830152866101008301524261012083015286610140830152856101608301526040518060208101106001600160401b03602083011117610a9b5760208101604052878152610180830152866101a083015286526001602052604086208151815560208201518051906001600160401b03821161075b5781906102fc60018501546121c1565b601f8111610a4a575b50602090601f83116001146109db578a926109d0575b50508160011b916000199060031b1c19161760018201555b60408201518051906001600160401b03821161075b57819061035860028501546121c1565b601f811161097f575b50602090601f8311600114610910578a92610905575b50508160011b916000199060031b1c19161760028201555b60608201518051906001600160401b03821161075b5781906103b460038501546121c1565b601f81116108b4575b50602090601f8311600114610845578a9261083a575b50508160011b916000199060031b1c19161760038201555b6080820151600482015560a0808301516005830180546001600160a01b03199081166001600160a01b039384161790915560c085015160068501805490921690831617905560e08401516007840180546101008701516001600160a81b0319909116929093169190911791151590921b60ff60a01b16179055610120820151600882015561014082015160098201556101608201518051906001600160401b03821161075b5781906104a0600a8501546121c1565b601f81116107e9575b50602090601f831160011461077a578a9261076f575b50508160011b916000199060031b1c191617600a8201555b6101808201518051906001600160401b03821161075b576104fb600b8401546121c1565b601f8111610716575b5060209089601f841160011461067857600c6106679585610652966106369a967f0232fc13fd751a3b690156acdf75eaa406dbf486d58c0570fa809eb882ae1a6a9c9a966101a0969261066d575b50508160011b916000199060031b1c191617600b8201555b01910151151560ff80198354169116179055338952600260205261059360408a208a5490612306565b3389526004602052604089206105a981546122e1565b90556106448954976105f0896040516105c18161209f565b601881527f53657276696365206372656174656420776974682049443a000000000000000060208201526124c7565b6106228a6040516106008161209f565b601081526f24b6b0b3b29024a82329902430b9b41d60811b602082015261251f565b60405196879660a0885260a08801906122a1565b9086820360208801526122a1565b9084820360408601526122a1565b346060840152828103608084015233966122a1565b0390a380f35b015190503880610552565b50600b84018a5260208a209190601f1984168b5b8181106106fe5750610667956001866106369a967f0232fc13fd751a3b690156acdf75eaa406dbf486d58c0570fa809eb882ae1a6a9c9a966101a0966106529a600c97106106e5575b505050811b01600b82015561056a565b015160001960f88460031b161c191690553880806106d5565b9293602060018192878601518155019501930161068c565b600b84018a5260208a20601f840160051c810160208510610754575b601f830160051c82018110610748575050610504565b60008155600101610732565b5080610732565b634e487b7160e01b89526041600452602489fd5b0151905038806104bf565b9250600a84018a5260208a20908a935b601f19841685106107ce576001945083601f198116106107b5575b505050811b01600a8201556104d7565b015160001960f88460031b161c191690553880806107a5565b8181015183556020948501946001909301929091019061078a565b909150600a84018a5260208a20601f840160051c810160208510610833575b90849392915b601f830160051c820181106108245750506104a9565b6000815585945060010161080e565b5080610808565b0151905038806103d3565b9250600384018a5260208a20908a935b601f1984168510610899576001945083601f19811610610880575b505050811b0160038201556103eb565b015160001960f88460031b161c19169055388080610870565b81810151835560209485019460019093019290910190610855565b909150600384018a5260208a20601f840160051c8101602085106108fe575b90849392915b601f830160051c820181106108ef5750506103bd565b600081558594506001016108d9565b50806108d3565b015190503880610377565b9250600284018a5260208a20908a935b601f1984168510610964576001945083601f1981161061094b575b505050811b01600282015561038f565b015160001960f88460031b161c1916905538808061093b565b81810151835560209485019460019093019290910190610920565b909150600284018a5260208a20601f840160051c8101602085106109c9575b90849392915b601f830160051c820181106109ba575050610361565b600081558594506001016109a4565b508061099e565b01519050388061031b565b9250600184018a5260208a20908a935b601f1984168510610a2f576001945083601f19811610610a16575b505050811b016001820155610333565b015160001960f88460031b161c19169055388080610a06565b818101518355602094850194600190930192909101906109eb565b909150600184018a5260208a20601f840160051c810160208510610a94575b90849392915b601f830160051c82018110610a85575050610305565b60008155859450600101610a6f565b5080610a69565b634e487b7160e01b600052604160045260246000fd5b7f546f6f206d616e792061637469766520736572766963657300000000000000006040519162461bcd60e51b83526020600484015260186024840152820152fd5b7f496d61676520686173682063616e6e6f7420626520656d7074790000000000006040519162461bcd60e51b835260206004840152601a6024840152820152fd5b7f456e64206c6f636174696f6e2063616e6e6f7420626520656d707479000000006040519162461bcd60e51b835260206004840152601c6024840152820152fd5b7f5374617274206c6f636174696f6e2063616e6e6f7420626520656d70747900006040519162461bcd60e51b835260206004840152601e6024840152820152fd5b745469746c652063616e6e6f7420626520656d70747960581b6040519162461bcd60e51b83526020600484015260156024840152820152fd5b61020360f41b6084927f466c6f7720616d6f756e74206d7573742062652067726561746572207468616e6040519362461bcd60e51b85526020600486015260226024860152840152820152fd5b8680fd5b8480fd5b8280fd5b5080fd5b503461016a57602036600319011261016a57806040916101a08351610c6f81612068565b828152606060208201526060858201526060808201528260808201528260a08201528260c08201528260e082015282610100820152826101208201528261014082015260606101608201526060610180820152015260043580151580610ebf575b610cd990612340565b815260016020522060ff600c60405192610cf284612068565b80548452610d02600182016121fb565b6020850152610d13600282016121fb565b6040850152610d24600382016121fb565b60608501526004810154608085015260058101546001600160a01b0390811660a0808701919091526006830154821660c0870152600783015491821660e08701521c8316151561010085015260088101546101208501526009810154610140850152610d92600a82016121fb565b610160850152610da4600b82016121fb565b61018085015201541615156101a0820152604051809160208252805160208301526101a0610eb0610e9a610e1b610e05610def60208701516101c060408a01526101e08901906122a1565b6040870151888203601f190160608a01526122a1565b6060860151878203601f190160808901526122a1565b608085015160a087015260018060a01b0360a08601511660c087015260018060a01b0360c08601511660e087015260018060a01b0360e0860151166101008701526101008501511515610120870152610120850151610140870152610140850151610160870152610160850151601f19878303016101808801526122a1565b610180840151858203601f1901848701526122a1565b91015115156101c08301520390f35b508154811115610cd0565b503461016a57602080600319360112610c4757600435801515806110ee575b610ef290612340565b80835260018252604083206005810180546001600160a01b03949293919290851633036110aa57600684019485549581871696610f30881515612419565b6007870190815491610f4485841615612381565b610f5460ff8460a01c16156123cd565b896bffffffffffffffffffffffff60a01b80941617905516905585875260038252610f828360408920612306565b80600554169382600487015495606484845416604051988993849263f6c9d18160e01b84528a600485015260248401528c60448401525af194851561109f578895611069575b508460097f920b68889c6cbb939cd36d69a0e12939a0bba7f2528e4ee3816950fef1fee78a9596970155611030856040516110028161209f565b601c81527f5365727669636520616363657074616e636520617070726f7665643a00000000868201526124c7565b61105c866040516110408161209f565b600b81526a27232a1036b4b73a32b21d60a91b868201526124c7565b541693604051908152a480f35b9394508284813d8311611098575b61108181836120ba565b8101031261109457925193926009610fc8565b8780fd5b503d611077565b6040513d8a823e3d90fd5b6064906040519062461bcd60e51b82526004820152601a60248201527f4f6e6c79207265717565737465722063616e20617070726f76650000000000006044820152fd5b508254811115610ee9565b503461016a578060031936011261016a576005546040516001600160a01b039091168152602090f35b503461016a57604036600319011261016a5761113c612142565b6001600160a01b031681526003602052604081208054602435929083101561016a57602061116a8484612158565b90549060031b1c604051908152f35b503461016a57602080600319360112610c47576001600160a01b0361119c612142565b1682526002815260408220916040518092808554928381520194835280832092905b8282106111e15761012c856111d5818903826120ba565b60405191829182612186565b8354865294850194600193840193909101906111be565b503461016a57602036600319011261016a576004358152600160205260409020805460018201611227906121fb565b91611234600282016121fb565b90611241600382016121fb565b6004820154600583015460068401546007850154600886015460098701549390926001600160a01b039190821690821661127d600a8a016121fb565b9761128a600b8b016121fb565b99600c015460ff169a6040519d8e9d8e528d6101c090816020820152016112b0916122a1565b8d810360408f01526112c1916122a1565b8c810360608e01526112d2916122a1565b9660808c015260a08b015260c08a0152811660e089015260a01c60ff161515610100880152610120870152610140860152848103610160860152611315916122a1565b838103610180850152611327916122a1565b9015156101a08301520390f35b503461016a57602080600319360112610c475760043590811515806114f0575b61135d90612340565b8183526001815260408320600781015491906001600160a01b0361138381851615612381565b60068201918254948286166114ab57906113a560ff60059360a01c16156123cd565b01541692338414611466576001600160a01b0319163317905560405161143d919061140d9085906113d581612084565b602181527f416363657074616e63652072657175657374656420666f72207365727669636584820152601d60f91b60408201526124c7565b702832b73234b7339030b1b1b2b83a37b91d60791b6040519161142f8361209f565b601183528201523390612574565b33917fc071e3d7bc5aad33931c27ff45d85450f24b6cd998f0de0e7f7d7b7bc4996e5e8480a480f35b60405162461bcd60e51b815260048101849052601e60248201527f43616e6e6f742061636365707420796f7572206f776e207365727669636500006044820152606490fd5b60405162461bcd60e51b815260048101869052601a60248201527f416363657074616e636520616c72656164792070656e64696e670000000000006044820152606490fd5b508254821115611354565b503461016a57602080600319360112610c47576001600160a01b0361151e612142565b1682526003815260408220916040518092808554928381520194835280832092905b8282106115575761012c856111d5818903826120ba565b835486529485019460019384019390910190611540565b503461016a57602036600319011261016a576020906040906001600160a01b03611596612142565b168152600483522054604051908152f35b503461016a57602036600319011261016a57600435801515806116fa575b6115ce90612340565b80825260016020526040822060058101546001600160a01b03929190831633036116b557600601805492831692611606841515612419565b6bffffffffffffffffffffffff60a01b169055611658816040516116298161209f565b601c81527f5365727669636520616363657074616e63652072656a65637465643a0000000060208201526124c7565b61168c826040516116688161209f565b60128152712932b532b1ba32b21030b1b1b2b83a37b91d60711b6020820152612574565b33907f8737e827aa89fe14679f24685f69b7d73d97215ed79c9fbc5f12efa80f61f9188480a480f35b60405162461bcd60e51b815260206004820152601960248201527f4f6e6c79207265717565737465722063616e2072656a656374000000000000006044820152606490fd5b5081548111156115c5565b503461016a578060031936011261016a5780548160015b8281111561178e575061172e90612481565b918060015b83811115611749576040518061012c8782612186565b808252600160205260ff600760408420015460a01c1615611773575b61176e906122e1565b611733565b91611786818461014b61176e94896124b3565b929050611765565b808452600160205260ff600760408620015460a01c16156117b8575b6117b3906122e1565b61171c565b906117c56117b3916122e1565b9190506117aa565b503461016a57602080600319360112610c475760043580151580611a87575b6117f590612340565b808352600182526040832090600582019260018060a01b038085541693338503611a425760078101948554838116156119fd5761183860ff8260a01c16156123cd565b60098301928354156119c457600c015460ff16156119745760ff60a01b1916600160a01b1786558752600483526040872080546118749061245d565b9055868260055416825490803b15610c4357602483926040519485938492630b6e5b3360e01b845260048401525af1801561109f57611945575b5090807f0d4a7936f89e13722727311f269700437c769fba2cf442558c53a0f53a322dfa9392611907866040516118e48161209f565b601281527129b2b93b34b1b29031b7b6b83632ba32b21d60711b878201526124c7565b5496611935886040516119198161209f565b600b81526a27232a10313ab93732b21d60a91b878201526124c7565b541694541694604051908152a480f35b6001600160401b0381989298116119605760405295816118ae565b634e487b7160e01b82526041600452602482fd5b60405162461bcd60e51b815260048101869052602260248201527f436f6d706c6574696f6e20696d616765206e6f74207375626d69747465642079604482015261195d60f21b6064820152608490fd5b60405162461bcd60e51b8152600481018790526011602482015270139bc813919508185cdcdbd8da585d1959607a1b6044820152606490fd5b60405162461bcd60e51b815260048101869052601860248201527f53657276696365206e6f742061636365707465642079657400000000000000006044820152606490fd5b60405162461bcd60e51b815260048101849052601b60248201527f4f6e6c79207265717565737465722063616e20636f6d706c65746500000000006044820152606490fd5b5082548111156117ec565b503461016a578060031936011261016a576020604051600a8152f35b503461016a57604036600319011261016a57611ac8612142565b6001600160a01b031681526002602052604081208054602435929083101561016a576020611af68484612158565b90546040519160031b1c8152f35b503461016a57602080600319360112610c47576004359081151580611cb9575b611b2d90612340565b818352600181526040832060058101546001600160a01b039081163303611c745760078201908154908116611c2f578560048194829484611b7560ff869760a01c16156123cd565b60ff60a01b1916600160a01b179055338352818752604083208054611b999061245d565b90550154335af13d15611c2a573d611bb0816120db565b90611bbe60405192836120ba565b815284833d92013e5b15611bf6575033907f4de9c9d8194dcb45ece90ef821b3695534fee9d6c7b5bd9b260de4ded1fd9e8f8380a380f35b6064906040519062461bcd60e51b82526004820152600d60248201526c1499599d5b990819985a5b1959609a1b6044820152fd5b611bc7565b60405162461bcd60e51b815260048101859052601e60248201527f43616e6e6f742063616e63656c206163636570746564207365727669636500006044820152606490fd5b60405162461bcd60e51b815260048101849052601960248201527f4f6e6c79207265717565737465722063616e2063616e63656c000000000000006044820152606490fd5b508254821115611b24565b503461016a57604036600319011261016a576001600160401b0360043560243582811161204a57611cf99036906004016120f6565b8115158061203f575b611d0b90612340565b818452600160208181526040862060078101549195909291336001600160a01b03821603611fee5760ff611d439160a01c16156123cd565b600c83019260ff845416611fa957845115611f5657600b01908451908111611f4257611d6f82546121c1565b601f8111611efc575b5086601f8211600114611e765791817f6babfd0069fb9ab85f10e0e5dac7bc989ffe1074e08acc9e603f73a15165d0d496949261066796948b91611e6b575b50600019600383901b1c191690831b1790555b60ff19825416179055611e2184604051611de381612084565b602781527f436f6d706c6574696f6e20696d616765207375626d697474656420666f722073888201526632b93b34b1b29d60c91b60408201526124c7565b611e5881604051611e318161209f565b601681527521b7b6b83632ba34b7b71024b6b0b3b2902430b9b41d60511b8882015261251f565b60405191829186835233968301906122a1565b905085015138611db7565b82895287892090601f1983168a5b8a828210611ee857505092610667969492869492827f6babfd0069fb9ab85f10e0e5dac7bc989ffe1074e08acc9e603f73a15165d0d49a989410611ecf575b5050811b019055611dca565b87015160001960f88460031b161c191690553880611ec3565b898401518555938701939283019201611e84565b828952878920601f830160051c810191898410611f38575b601f0160051c019084905b828110611f2d575050611d78565b8a8155018490611f1f565b9091508190611f14565b634e487b7160e01b88526041600452602488fd5b60405162461bcd60e51b815260048101889052602560248201527f436f6d706c6574696f6e20696d61676520686173682063616e6e6f7420626520604482015264656d70747960d81b6064820152608490fd5b60405162461bcd60e51b815260048101889052601c60248201527f436f6d706c6574696f6e20616c7265616479207375626d6974746564000000006044820152606490fd5b60405162461bcd60e51b815260048101889052602360248201527f4f6e6c79206163636570746f722063616e207375626d697420636f6d706c657460448201526234b7b760e91b6064820152608490fd5b508354821115611d02565b8380fd5b905034610c475781600319360112610c4757602091548152f35b6101c081019081106001600160401b03821117610a9b57604052565b606081019081106001600160401b03821117610a9b57604052565b604081019081106001600160401b03821117610a9b57604052565b90601f801991011681019081106001600160401b03821117610a9b57604052565b6001600160401b038111610a9b57601f01601f191660200190565b81601f8201121561213d5780359061210d826120db565b9261211b60405194856120ba565b8284526020838301011161213d57816000926020809301838601378301015290565b600080fd5b600435906001600160a01b038216820361213d57565b80548210156121705760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b6020908160408183019282815285518094520193019160005b8281106121ad575050505090565b83518552938101939281019260010161219f565b90600182811c921680156121f1575b60208310146121db57565b634e487b7160e01b600052602260045260246000fd5b91607f16916121d0565b906040519182600082549261220f846121c1565b90818452600194858116908160001461227e575060011461223b575b5050612239925003836120ba565b565b9093915060005260209081600020936000915b8183106122665750506122399350820101388061222b565b8554888401850152948501948794509183019161224e565b91505061223994506020925060ff191682840152151560051b820101388061222b565b919082519283825260005b8481106122cd575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016122ac565b60001981146122f05760010190565b634e487b7160e01b600052601160045260246000fd5b805468010000000000000000811015610a9b5761232891600182018155612158565b819291549060031b91821b91600019901b1916179055565b1561234757565b60405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a59081cd95c9d9a58d948125160721b6044820152606490fd5b1561238857565b60405162461bcd60e51b815260206004820152601860248201527f5365727669636520616c726561647920616363657074656400000000000000006044820152606490fd5b156123d457565b60405162461bcd60e51b815260206004820152601960248201527f5365727669636520616c726561647920636f6d706c65746564000000000000006044820152606490fd5b1561242057565b60405162461bcd60e51b81526020600482015260156024820152744e6f2070656e64696e6720616363657074616e636560581b6044820152606490fd5b80156122f0576000190190565b6001600160401b038111610a9b5760051b60200190565b9061248b8261246a565b61249860405191826120ba565b82815280926124a9601f199161246a565b0190602036910137565b80518210156121705760209160051b010190565b60009190829161250c60405180926124f86020830195632d839cb360e21b87526040602485015260648401906122a1565b90604483015203601f1981018352826120ba565b51906a636f6e736f6c652e6c6f675afa50565b6000919061256661250c84936040519283916125546020840196634b5c427760e01b88526040602486015260648501906122a1565b838103602319016044850152906122a1565b03601f1981018352826120ba565b60009190829161250c60405180926125a5602083019563319af33360e01b87526040602485015260648401906122a1565b6001600160a01b0391909116604483015203601f1981018352826120ba56fea26469706673582212201bfdd14c6d62d44175c50f013478462bb719b458533085c9e0e6819e5f36fd4d64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "completeService(uint256)": {
        "notice": "MODIFIED: Complete service (now called by requester after verifying completion image)"
      },
      "submitCompletionImage(uint256,string)": {
        "notice": "NEW: Submit completion image (called by service provider)"
      }
    },
    "notice": "A smart contract that manages service requests with NFT escrow Implements two-signature approval system with image proof of completion",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2995,
        "contract": "contracts/ServiceContract.sol:ServiceContract",
        "label": "serviceCount",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3000,
        "contract": "contracts/ServiceContract.sol:ServiceContract",
        "label": "services",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Service)2993_storage)"
      },
      {
        "astId": 3005,
        "contract": "contracts/ServiceContract.sol:ServiceContract",
        "label": "requesterServices",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3010,
        "contract": "contracts/ServiceContract.sol:ServiceContract",
        "label": "acceptedServices",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3014,
        "contract": "contracts/ServiceContract.sol:ServiceContract",
        "label": "activeServicesCount",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3020,
        "contract": "contracts/ServiceContract.sol:ServiceContract",
        "label": "serviceNFT",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IServiceNFT)2963"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IServiceNFT)2963": {
        "encoding": "inplace",
        "label": "contract IServiceNFT",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Service)2993_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ServiceContract.Service)",
        "numberOfBytes": "32",
        "value": "t_struct(Service)2993_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Service)2993_storage": {
        "encoding": "inplace",
        "label": "struct ServiceContract.Service",
        "members": [
          {
            "astId": 2966,
            "contract": "contracts/ServiceContract.sol:ServiceContract",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2968,
            "contract": "contracts/ServiceContract.sol:ServiceContract",
            "label": "title",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2970,
            "contract": "contracts/ServiceContract.sol:ServiceContract",
            "label": "startLocation",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2972,
            "contract": "contracts/ServiceContract.sol:ServiceContract",
            "label": "endLocation",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 2974,
            "contract": "contracts/ServiceContract.sol:ServiceContract",
            "label": "flowAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2976,
            "contract": "contracts/ServiceContract.sol:ServiceContract",
            "label": "requester",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 2978,
            "contract": "contracts/ServiceContract.sol:ServiceContract",
            "label": "pendingAcceptor",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 2980,
            "contract": "contracts/ServiceContract.sol:ServiceContract",
            "label": "acceptedBy",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 2982,
            "contract": "contracts/ServiceContract.sol:ServiceContract",
            "label": "completed",
            "offset": 20,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 2984,
            "contract": "contracts/ServiceContract.sol:ServiceContract",
            "label": "createdAt",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 2986,
            "contract": "contracts/ServiceContract.sol:ServiceContract",
            "label": "nftTokenId",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 2988,
            "contract": "contracts/ServiceContract.sol:ServiceContract",
            "label": "imageIpfsHash",
            "offset": 0,
            "slot": "10",
            "type": "t_string_storage"
          },
          {
            "astId": 2990,
            "contract": "contracts/ServiceContract.sol:ServiceContract",
            "label": "completionImageHash",
            "offset": 0,
            "slot": "11",
            "type": "t_string_storage"
          },
          {
            "astId": 2992,
            "contract": "contracts/ServiceContract.sol:ServiceContract",
            "label": "completionSubmitted",
            "offset": 0,
            "slot": "12",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}